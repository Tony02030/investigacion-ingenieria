scalar Date

type Query {
    ##########Client#############
    clients: [Client],
    clientById(id: ID!): Client

    ##########Account############
    accounts: [Account],
    accountById(id: ID!) : Account
}

type Mutation {
    ##########Client#############
    addClient(clientInput: ClientInput): Client
    updateClient(id: ID!, clientInput : ClientInput!): Client
    deleteClient(id: ID!) : Boolean

    ##########Account############
    addAccount(
        accountNumber: String!,
        clientId: Int!,
        balance: Float!,
        accountTypeId: Int!
    ): Account!
}

type Client{
     name: String!,
     address: String!,
     phone: String,
     email: String!,
     birthDate: Date
}

type AccountType{
    id: ID!,
    name: String!
}

type Account{
    accountNumber: String,
    client: Client!,
    balance: Float!,
    accountType: AccountType!
}

type Transaction {
    id: ID!,
    sourceAccount: Account,
    destinationAccount: Account,
    dateTime: Date,
    amount: Float
}

type Loan{
    id: ID,
    client: Client,
    amount: Float,
    interestRate: Float,
    termMonths: Int
}

input ClientInput {
    name: String!
    address: String!
    phone: String
    email: String!
    birthDate: Date
    accountId: ID!
}